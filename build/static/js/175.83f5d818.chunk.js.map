{"version":3,"file":"static/js/175.83f5d818.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/useVisibleItemsDelay.hook.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","/* eslint-disable no-unused-vars */\nimport img from './error.png';\n\nconst ErrorMessage = () => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />\n        <div>\n            <img style={\n                {\n                    display: 'block',\n                    width: '200px',\n                    height: '200px',\n                    objectFit: 'contain',\n                    margin: '0 auto'\n                }\n            } \n            src={img} \n            alt=\"error\" \n            />\n            <div className='pulse' style={{textAlign: 'center', fontWeight: 'bold', fontSize: '25px', marginTop: '-15px'}}>Error!</div>\n        </div>\n\n    )\n}\n\nexport default ErrorMessage;","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition,  TransitionGroup} from 'react-transition-group';\n\nimport useVisibleItems from '../../hooks/useVisibleItemsDelay.hook';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(150);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const visibleItems = useVisibleItems(comicsList);\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended =  false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8)\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const duration = 300;\n\n        return (\n            <TransitionGroup component=\"ul\" className=\"comics__grid\">\n                {arr.map((item, i) => {\n                    const {title, thumbnail, price, id} = item;\n                    return (\n                        <CSSTransition key={id} timeout={duration} classNames=\"comics\">\n                            <li className=\"comics__item\" key={i}>\n                                <Link to={`/comics/${id}`}>\n                                    <img src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                                    <div className=\"comics__item-name\">{title}</div>\n                                    <div className=\"comics__item-price\">{price}</div>\n                                </Link>\n                            </li>\n                        </CSSTransition>\n                    )\n                })}\n            </TransitionGroup>\n        )\n    }\n\n    const items = renderItems(visibleItems);\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button className=\"button button__main button__long\"\n                     disabled={newItemLoading}\n                     style={{'display': comicsEnded ? 'none' : 'block'}}\n                     onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\n\nimport AppBanner from \"../appBanner/AppBanner\";\nimport ComicsList from \"../comicsList/ComicsList\";\n\nconst ComicsPage = () => {\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics Page</title>\n            </Helmet>\n            <AppBanner/>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage;","import { useState, useEffect } from 'react';\n\nfunction useVisibleItems(charList) {\n  const [visibleItems, setVisibleItems] = useState([]);\n\n  useEffect(() => {\n    let timer;\n\n    charList.forEach((item, i) => {\n      timer = setTimeout(() => {\n        setVisibleItems(prevVisibleItems => [...prevVisibleItems, item]);\n      }, i * 300); \n    });\n\n    return () => clearTimeout(timer);\n  }, [charList]);\n\n  return visibleItems;\n}\n\nexport default useVisibleItems;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request  = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data =  await response.json();\n\n            setLoading(false);\n\n            return data;\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return{loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=33c17539858fd8200918eb1fb94ca45f';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE'\n        }\n    }\n\n    const _transformCharacter = (char) => {\n        let description = '';\n\n        char.description.length > 220 ? description = char.description.slice(0, 220) + '...' : description = char.description;\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: description ? description : 'There is no description for this character.',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url, \n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, getCharacterByName}\n}\n\nexport default useMarvelService;\n\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","textAlign","fontWeight","fontSize","marginTop","ComicsList","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","visibleItems","useVisibleItems","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","TransitionGroup","component","map","item","i","title","thumbnail","price","id","CSSTransition","timeout","classNames","Link","to","concat","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","charList","setVisibleItems","timer","forEach","setTimeout","prevVisibleItems","clearTimeout","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformComics","comics","_comics$textObjects$","path","extension","description","pageCount","language","textObjects","prices","_transformCharacter","char","slice","homepage","urls","wiki","getAllCharacters","results","getCharacter","res","getComic","getCharacterByName"],"sourceRoot":""}