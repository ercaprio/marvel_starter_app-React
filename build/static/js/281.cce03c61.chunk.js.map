{"version":3,"file":"static/js/281.cce03c61.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","/* eslint-disable no-unused-vars */\nimport img from './error.png';\n\nconst ErrorMessage = () => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />\n        <div>\n            <img style={\n                {\n                    display: 'block',\n                    width: '200px',\n                    height: '200px',\n                    objectFit: 'contain',\n                    margin: '0 auto'\n                }\n            } \n            src={img} \n            alt=\"error\" \n            />\n            <div className='pulse' style={{textAlign: 'center', fontWeight: 'bold', fontSize: '25px', marginTop: '-15px'}}>Error!</div>\n        </div>\n\n    )\n}\n\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport AppBanner from \"../appBanner/AppBanner\";\nimport setContent from '../../utils/setContent';\n\n\nconst SinglePage = ({Component, dataType}) => {\n        const {id} = useParams();\n        const [data, setData] = useState(null);\n        const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\n\n        useEffect(() => {\n            updateData()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [id])\n\n        const updateData = () => {\n            clearError();\n\n            // eslint-disable-next-line default-case\n            switch (dataType) {\n                case 'comic':\n                    getComic(id)\n                        .then(onDataLoaded)\n                        .then(() => setProcess('confirmed'));\n                    break;\n                case 'character':\n                    getCharacter(id)\n                        .then(onDataLoaded)\n                        .then(() => setProcess('confirmed'));\n            }\n        }\n\n        const onDataLoaded = (data) => {\n            setData(data);\n        }\n\n        return (\n            <>\n                <AppBanner/>\n                {setContent(process, Component, data)}\n            </>\n        )\n}\n\nexport default SinglePage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request  = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data =  await response.json();\n\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return{request, clearError, process, setProcess}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=33c17539858fd8200918eb1fb94ca45f';\n    const _baseOffset = 300;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n\n    const getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE'\n        }\n    }\n\n    const _transformCharacter = (char) => {\n        let description = '';\n\n        char.description.length > 220 ? description = char.description.slice(0, 220) + '...' : description = char.description;\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: description ? description : 'There is no description for this character.',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url, \n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    return {\n        clearError, \n        process,\n        setProcess, \n        getAllCharacters, \n        getCharacter, \n        getAllComics, \n        getComic, \n        getCharacterByName}\n}\n\nexport default useMarvelService;\n\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\nimport Spinner from \"../components/spinner/Spinner\";\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\n\nconst setContent = (process, Component, data) => {\n    switch(process) {\n        case 'waiting': \n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default: \n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","textAlign","fontWeight","fontSize","marginTop","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_transformComics","comics","_comics$textObjects$","title","thumbnail","path","extension","description","pageCount","language","textObjects","price","prices","_transformCharacter","char","slice","name","homepage","urls","wiki","items","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName","Skeleton","Spinner"],"sourceRoot":""}