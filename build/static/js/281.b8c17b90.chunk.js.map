{"version":3,"file":"static/js/281.b8c17b90.chunk.js","mappings":"qPAIA,MAaA,EAbkBA,KAEVC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,OAAKC,IAAKC,EAAUC,IAAI,cACxBN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,0BACRC,EAAAA,EAAAA,KAAA,SAAK,kBAG/BA,EAAAA,EAAAA,KAAA,OAAKC,IAAKG,EAAcD,IAAI,oB,8CCTxC,MAsBA,EAtBqBE,KAGbR,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKM,MACD,CACIC,QAAS,QACTC,MAAO,QACPC,OAAQ,QACRC,UAAW,UACXC,OAAQ,UAGhBV,I,61KACAE,IAAI,WAEJH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAQQ,MAAO,CAACM,UAAW,SAAUC,WAAY,OAAQC,SAAU,OAAQC,UAAW,SAAShB,SAAC,a,gHCR3H,MAuCA,EAvCmBiB,IAA4B,IAA3B,UAACC,EAAS,SAAEC,GAASF,EACjC,MAAM,GAACG,IAAMC,EAAAA,EAAAA,MACNC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC3B,QAACC,EAAO,MAAEC,EAAK,SAAEC,EAAQ,aAAEC,EAAY,WAAEC,IAAcC,EAAAA,EAAAA,MAE7DC,EAAAA,EAAAA,YAAU,KACNC,GAAY,GACb,CAACZ,IAEJ,MAAMY,EAAaA,KAGf,OAFAH,IAEQV,GACJ,IAAK,QACDQ,EAASP,GAAIa,KAAKC,GAClB,MACJ,IAAK,YACDN,EAAaR,GAAIa,KAAKC,GAC9B,EAGEA,EAAgBZ,IAClBC,EAAQD,EAAK,EAGXa,EAAeT,GAAQzB,EAAAA,EAAAA,KAACK,EAAAA,EAAY,IAAK,KACzC8B,EAAUX,GAAUxB,EAAAA,EAAAA,KAACoC,EAAAA,EAAO,IAAK,KACjCC,EAAYb,GAAWC,IAAUJ,EAAmC,MAA3BrB,EAAAA,EAAAA,KAACiB,EAAS,CAACI,KAAMA,IAEhE,OACIxB,EAAAA,EAAAA,MAAAyC,EAAAA,SAAA,CAAAvC,SAAA,EACIC,EAAAA,EAAAA,KAACJ,EAAAA,EAAS,IACTsC,EACAC,EACAE,IACF,C,6CC5CR,MCiEP,EAjEyBR,KACrB,MAAM,QAACL,EAAO,QAAEe,EAAO,MAAEd,EAAK,WAAEG,GDDbY,MACnB,MAAOhB,EAASiB,IAAclB,EAAAA,EAAAA,WAAS,IAChCE,EAAOiB,IAAYnB,EAAAA,EAAAA,UAAS,MA2BnC,MAAM,CAACC,UAASe,SAzBCI,EAAAA,EAAAA,cAAYC,eAAOC,GAAsF,IAAjFC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAAOG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,eAAgB,oBAE7FN,GAAW,GAEX,IACI,MAAMW,QAAiBC,MAAMR,EAAK,CAACC,SAAQI,OAAMC,YAEjD,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAM,mBAADC,OAAoBX,EAAG,cAAAW,OAAaJ,EAASK,SAGhE,MAAMpC,QAAc+B,EAASM,OAI7B,OAFAjB,GAAW,GAEJpB,CACX,CAAE,MAAMsC,GAGJ,MAFAlB,GAAW,GACXC,EAASiB,EAAEC,SACLD,CACV,CACJ,GAAG,IAIsBlC,QAAOG,YAFbe,EAAAA,EAAAA,cAAY,IAAMD,EAAS,OAAO,IAEV,EC5BGF,GAExCqB,EAAW,4CACXC,EAAU,0CA4BVC,EAAoBC,IAAY,IAADC,EACjC,MAAO,CACH9C,GAAI6C,EAAO7C,GACX+C,MAAOF,EAAOE,MACdC,UAAWH,EAAOG,UAAUC,KAAO,IAAMJ,EAAOG,UAAUE,UAC1DC,YAAaN,EAAOM,aAAe,0BAC5CC,UAAWP,EAAOO,UAAS,GAAAf,OACrBQ,EAAOO,UAAS,OACnB,2CACMC,UAA+B,QAArBP,EAAAD,EAAOS,YAAY,UAAE,IAAAR,OAAA,EAArBA,EAAuBO,WAAY,QAC7CE,MAAOV,EAAOW,OAAO,GAAGD,MAAK,GAAAlB,OAAMQ,EAAOW,OAAO,GAAGD,MAAK,KAAM,gBAClE,EAGCE,EAAuBC,IACzB,IAAIP,EAAc,GAIlB,OAFgCA,EAAhCO,EAAKP,YAAYtB,OAAS,IAAoB6B,EAAKP,YAAYQ,MAAM,EAAG,KAAO,MAAsBD,EAAKP,YAEnG,CACHnD,GAAI0D,EAAK1D,GACT4D,KAAMF,EAAKE,KACXT,YAAaA,GAA4B,8CACzCH,UAAWU,EAAKV,UAAUC,KAAO,IAAMS,EAAKV,UAAUE,UACtDW,SAAUH,EAAKI,KAAK,GAAGpC,IACvBqC,KAAML,EAAKI,KAAK,GAAGpC,IACnBmB,OAAQa,EAAKb,OAAOmB,MACvB,EAGL,MAAO,CAAC3D,UAASC,QAAOG,aAAYwD,iBAvDXxC,iBAAiC,IAA1ByC,EAAMtC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFlB,IAIhB,aADkBR,EAAQ,GAADiB,OAAIK,EAAQ,8BAAAL,OAA6B6B,EAAM,MAAA7B,OAAKM,KAClEzC,KAAKiE,QAAQC,IAAIX,EAChC,EAoDsDjD,aAlDjCiB,UACjB,MAAM4C,QAAYjD,EAAQ,GAADiB,OAAIK,EAAQ,eAAAL,OAAcrC,EAAE,KAAAqC,OAAIM,IACzD,OAAOc,EAAoBY,EAAInE,KAAKiE,QAAQ,GAAG,EAgDiBG,aAxC/C7C,iBAAiC,IAA1ByC,EAAMtC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAjBd,IAmBhB,aADkBR,EAAQ,GAADiB,OAAIK,EAAQ,0BAAAL,OAAyB6B,EAAM,MAAA7B,OAAKM,KAC9DzC,KAAKiE,QAAQC,IAAIxB,EAChC,EAqCkFrC,SAnCjEkB,UACnB,MAAM4C,QAAYjD,EAAQ,GAADiB,OAAIK,EAAQ,WAAAL,OAAUrC,EAAE,KAAAqC,OAAIM,IACrD,OAAOC,EAAiByB,EAAInE,KAAKiE,QAAQ,GAAG,EAiCkDI,mBA7CjE9C,gBACLL,EAAQ,GAADiB,OAAIK,EAAQ,oBAAAL,OAAmBuB,EAAI,KAAAvB,OAAIM,KACrDzC,KAAKiE,QAAQC,IAAIX,GA2C+E,C","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","/* eslint-disable no-unused-vars */\nimport img from './error.png';\n\nconst ErrorMessage = () => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" />\n        <div>\n            <img style={\n                {\n                    display: 'block',\n                    width: '200px',\n                    height: '200px',\n                    objectFit: 'contain',\n                    margin: '0 auto'\n                }\n            } \n            src={img} \n            alt=\"error\" \n            />\n            <div className='pulse' style={{textAlign: 'center', fontWeight: 'bold', fontSize: '25px', marginTop: '-15px'}}>Error!</div>\n        </div>\n\n    )\n}\n\nexport default ErrorMessage;","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable default-case */\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport AppBanner from \"../appBanner/AppBanner\";\n\n\nconst SinglePage = ({Component, dataType}) => {\n        const {id} = useParams();\n        const [data, setData] = useState(null);\n        const {loading, error, getComic, getCharacter, clearError} = useMarvelService();\n\n        useEffect(() => {\n            updateData()\n        }, [id])\n\n        const updateData = () => {\n            clearError();\n\n            switch (dataType) {\n                case 'comic':\n                    getComic(id).then(onDataLoaded);\n                    break;\n                case 'character':\n                    getCharacter(id).then(onDataLoaded);\n            }\n        }\n\n        const onDataLoaded = (data) => {\n            setData(data);\n        }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !data) ? <Component data={data}/> : null;\n\n        return (\n            <>\n                <AppBanner/>\n                {errorMessage}\n                {spinner}\n                {content}\n            </>\n        )\n}\n\nexport default SinglePage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request  = useCallback(async (url, method = \"GET\", body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data =  await response.json();\n\n            setLoading(false);\n\n            return data;\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return{loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=33c17539858fd8200918eb1fb94ca45f';\n    const _baseOffset = 285;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            description: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n            language: comics.textObjects[0]?.language || \"en-us\",\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'NOT AVAILABLE'\n        }\n    }\n\n    const _transformCharacter = (char) => {\n        let description = '';\n\n        char.description.length > 220 ? description = char.description.slice(0, 220) + '...' : description = char.description;\n\n        return {\n            id: char.id,\n            name: char.name,\n            description: description ? description : 'There is no description for this character.',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url, \n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, getCharacterByName}\n}\n\nexport default useMarvelService;\n\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","textAlign","fontWeight","fontSize","marginTop","_ref","Component","dataType","id","useParams","data","setData","useState","loading","error","getComic","getCharacter","clearError","useMarvelService","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","message","_apiBase","_apiKey","_transformComics","comics","_comics$textObjects$","title","thumbnail","path","extension","description","pageCount","language","textObjects","price","prices","_transformCharacter","char","slice","name","homepage","urls","wiki","items","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName"],"sourceRoot":""}